{"version":3,"sources":["footer.js","clock.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","this","props","actual","Component","d","Date","setHours","getHours","Clock","state","time","toLocaleTimeString","newtime","intervalID","setInterval","updateClock","clearInterval","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAeeA,G,uLAVP,OACI,yBAAKC,UAAU,UACX,0DAA+B,6BAA/B,2BACA,kDAAwBC,KAAKC,MAAMC,a,GAL9BC,cCEjBC,G,MAAI,IAAIC,MACZD,EAAI,IAAIC,KAAKD,EAAEE,SAASF,EAAEG,WAAa,I,IAkDxBC,E,YA/CX,WAAYP,GAAO,IAAD,8BACd,4CAAMA,KAGDQ,MAAO,CACRC,MAAM,IAAIL,MAAOM,qBACjBC,QAASR,EAAEO,sBAND,E,iFAYG,IAAD,OAChBX,KAAKa,WAAaC,aAAY,kBAC1B,EAAKC,gBACL,O,6CAMJC,cAAchB,KAAKa,c,oCAKnB,IAAIT,EAAI,IAAIC,KACZD,EAAI,IAAIC,KAAKD,EAAEE,SAASF,EAAEG,WAAa,IACvCP,KAAKiB,SAAS,CACVP,MAAM,IAAIL,MAAOM,qBACjBC,QAASR,EAAEO,yB,+BAOf,OACI,yBAAKZ,UAAU,QACX,+BAAKC,KAAKS,MAAMG,SAChB,kBAAC,EAAD,CAAQV,OAAQF,KAAKS,MAAMC,Y,GAzCvBP,aCSLe,G,uLAXX,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,Y,GALQI,cCQEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3e771276.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './footer.css';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n                <h2>YST: Youness Standard Time <br></br> (+2hr your local time)</h2>\r\n                <h3>The actual time is {this.props.actual}</h3>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\nimport Footer from './footer';\r\n\r\nimport './clock.css';\r\nvar d = new Date();\r\nd = new Date(d.setHours(d.getHours() + 2));\r\n\r\nclass Clock extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        //This declared the state of time at the very beginning\r\n        this.state ={\r\n            time: new Date().toLocaleTimeString(),\r\n            newtime: d.toLocaleTimeString()\r\n        }\r\n        \r\n    }\r\n\r\n    //This happens when the component mount and the setInterval function get called with a call back function updateClock()\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(() =>\r\n            this.updateClock(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    //This section clears setInterval by calling intervalID so as to optimise memory\r\n    componentWillUnmount(){\r\n        clearInterval(this.intervalID)\r\n    }\r\n\r\n    //This function set the state of the time to a new time\r\n    updateClock(){\r\n        var d = new Date();\r\n        d = new Date(d.setHours(d.getHours() + 2));\r\n        this.setState({\r\n            time: new Date().toLocaleTimeString(),\r\n            newtime: d.toLocaleTimeString()\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Time\">\r\n                <p> {this.state.newtime}</p>\r\n                <Footer actual={this.state.time}/>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React, { Component } from 'react';\r\nimport Clock from './clock';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"clock\">\r\n          <Clock />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}